<?xml version="1.0"?>
<launch>

  <arg name='sim' value='True'/>

  <env name="GAZEBO_MODEL_PATH" value="$(find obstacle_avoidance)/models:$(optenv GAZEBO_MODEL_PATH)"/>
  <env name="GAZEBO_MEDIA_PATH" value="$(find obstacle_avoidance)/models:$(optenv GAZEBO_MEDIA_PATH)"/>

  <!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
  <node pkg="nodelet" type="nodelet" name="pcl_manager_nodelet" args="manager" output="screen" />
  <node pkg="nodelet" type="nodelet" name="voxel_grid_nodelet" args="load pcl/VoxelGrid pcl_manager_nodelet" output="screen">
    <remap from="~input" to="/camera/depth/color/points" />
    <remap from="~output" to="/camera/depth/color/points_sampled" />
    <param name="leaf_size" type="double" value="0.01" />
    <param name="filter_limit_min" type="double" value="0.0" />
    <param name="filter_limit_max" type="double" value="100" />
  </node>

  <!-- Run Workspace filter to remove points outside the workspace -->
  <node name="workspace_filter_node" pkg="obstacle_avoidance" type="workspace_filter" output="screen"> 
    <param name="x_min" type="double" value="-0.55"/>
    <param name="x_max" type="double" value="0.45"/>
    <param name="y_min" type="double" value="-0.2"/>
    <param name="y_max" type="double" value="0.8"/>
    <param name="z_min" type="double" value="0.01"/>
    <param name="z_max" type="double" value="1.0"/>
    <param name="cloud_sub_topic" type="string" value="/camera/depth/color/points_sampled"/>
    <param name="cloud_pub_topic" type="string" value="/camera/depth/color/points_bounded"/>
    <param name="target_frame" type="string" value="base_link"/>
  </node>  
  
  <!-- Run self robot filter to remove the robot from the pointcloud -->
  <node name="robot_self_filter_node" pkg="sensor_filters" type="pointcloud2_filter_chain" output="log">
    <rosparam command="load" file="$(find obstacle_avoidance)/config/filter_realsense_d435.yaml" />
    <remap from="~input" to="/camera/depth/color/points_bounded" />
    <remap from="~output" to="/camera/depth/color/points_filtered" />
  </node>

  <!-- Collsion volume reconstruction (add collsion objects in the virtual workspace model) -->
  <node name="collision_volume_reconstruction_node" pkg="obstacle_avoidance" type="collision_volume_reconstruction" output="screen"> 
    <param name="leaf_size" type="double" value="0.01" />
    <param name="min_cluster_size" type="int" value="1"/>
    <param name="max_samples" type="int" value="25000"/>
    <param name="cluster_tolerance" type="double" value="0.05"/>
    <param name="cluster_size_th" type="int" value="50"/>
    <param name="save_cloud" type="bool" value="false"/>
    <param name="save_mesh" type="bool" value="false"/>
    <param name="alpha" type="double" value="0.0"/>
    <param name="mesh_algo" type="string" value="d3d"/>
    <param name="cloud_sub_topic" type="string" value="/camera/depth/color/points_filtered"/>
    <param name="centroids_pub_topic" type="string" value="/centroids"/>
    <param name="centroids_marker_pub_topic" type="string" value="/centroids_marker"/>
  </node>

  <!-- Safety check node (detect movement in workspace and stop robot) -->
  <node name="safety_check_node" pkg="obstacle_avoidance" type="safety_check" output="screen"> 
    <param name="clusters_sub_topic" type="string" value="/clusters"/>
    <param name="safe_stop_pub_topic" type="string" value="/robot_safe_stop"/>
  </node>
  
  <!-- Collision avoidance node (detect collsions with object in the workspace an generate a collision avoding trajectory)-->
  <param name="cartesain_dmp_gamma_obs" type="double" value="200.0"/>
  <param name="cartesain_dmp_beta_obs" type="double" value="5.0"/>
  <param name="cartesain_dmp_k_obs" type="double" value="6.0"/>
  <param name="cartesain_dmp_gamma_np" type="double" value="500.0"/>
  <param name="cartesain_dmp_beta_np" type="double" value="4.0"/>
  <param name="cartesain_dmp_k_np" type="double" value="5.0"/>
  <param name="cartesain_dmp_gamma_d" type="double" value="15.0"/>
  <param name="cartesain_dmp_k_d" type="double" value="8.0"/>

  <node name="collision_check" pkg="obstacle_avoidance" type="collision_check" output="screen"/> 
  
  <group ns="cartesian">
  <node name="dmp_timed_roslaunch" pkg="timed_roslaunch" type="timed_roslaunch.sh" args="2 dmp dmp.launch" output="screen"/>
  </group>
  

</launch>
