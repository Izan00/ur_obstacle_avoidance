<?xml version="1.0"?>
<launch>

  <!--Obstacle parameters-->
  <!--<arg name="obstacle_urdf" default="$(find roy_dmp)/urdf/cube.xacro" doc="Use 'none' for no obstacle"/>-->
  <arg name="obstacle_urdf" default="none" doc="Use 'none' for no obstacle"/>
  
  <!--Camera parameters and configuration-->
  <arg name="use_cam" default="true"/>
  <arg name="sim_cam" default="true"/>
  <arg name="use_cam_tool" default="false"/>
  <arg name="publish_pointcloud" default="true"/>
  <arg name="camera_urdf" default="'$(find roy_dmp)/urdf/d435_camera.urdf.xacro'"/>

  <!--Robot description and related parameter files -->
  <arg name="robot_model" default="ur3" />
  <arg name="robot_urdf" default="'$(find roy_dmp)/urdf/ur3.xacro'"/>
  <arg name="joint_limit_params" default="$(find ur_description)/config/ur3/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find ur_description)/config/ur3/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find ur_description)/config/ur3/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find ur_description)/config/ur3/visual_parameters.yaml"/>

  <!--Common parameters -->
  <arg name="transmission_hw_interface" default="hardware_interface/EffortJointInterface" doc="The hardware_interface to expose for each joint in the simulated robot (one of: [PositionJointInterface, VelocityJointInterface, EffortJointInterface])"/>
  <arg name="safety_limits" default="false" doc="If True, enable the safety limits controller"/>
  <arg name="safety_pos_margin" default="0.15" doc="The lower/upper limits in the safety controller" />
  <arg name="safety_k_position" default="20" doc="Used to set k position in the safety controller" />

  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find ur_gazebo)/config/ur3_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller eff_joint_traj_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="joint_group_eff_controller" doc="Controllers that are initally loaded, but not started."/>

  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" default="125" doc="Rate at which robot_state_publisher should publish transforms."/>

  <!-- Gazebo parameters -->
  <arg name="paused" default="false" doc="Starts Gazebo in paused mode" />
  <arg name="gui" default="false" doc="Starts Gazebo gui" />
  <arg name="gazebo_model_name" default="robot"/>
  <arg name="start_gazebo" default="true"/>
  <arg name="gazebo_world" default="$(find roy_dmp)/resources/empty.world"/> <!--worlds/empty.world-->

  <!--Rviz-->
  <arg name="rviz" default="true"/>
  <arg name="rviz_config" value="$(find roy_dmp)/resources/dmp_config.rviz"/>

  <!--Robot model description-->
  <param name="robot_description" command="$(find xacro)/xacro $(arg robot_urdf)
    robot_model:=$(arg robot_model)
    joint_limit_params:=$(arg joint_limit_params)
    kinematics_params:=$(arg kinematics_params)
    physical_params:=$(arg physical_params)
    visual_params:=$(arg visual_params)
    transmission_hw_interface:=$(arg transmission_hw_interface)
    safety_limits:=$(arg safety_limits)
    safety_pos_margin:=$(arg safety_pos_margin)
    safety_k_position:=$(arg safety_k_position)
    sim_cam:=$(arg sim_cam)
    use_cam:=$(arg use_cam)
    use_cam_tool:=$(arg use_cam_tool)
    camera_urdf:=$(arg camera_urdf)
    publish_pointcloud:=$(arg publish_pointcloud)
    obstacle_urdf:=$(arg obstacle_urdf)"
  />

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

  <!-- Start the 'driver' (ie: Gazebo in this case) -->
  <include file="$(find ur_gazebo)/launch/inc/ur_control.launch.xml">
    <arg name="controller_config_file" value="$(arg controller_config_file)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
    <arg name="gazebo_model_name" value="$(arg gazebo_model_name)"/>
    <arg name="start_gazebo" value="$(arg start_gazebo)"/>
    <arg name="gazebo_world" value="$(arg gazebo_world)"/>
    <arg name="spawn_z" default="0"/>
  </include>

  <!--Start planning executor-->
  <include file="$(find ur3_moveit_config)/launch/moveit_planning_execution.launch">
    <arg name="sim" value="true" />
  </include> 

  <!--Start DMP drivers-->
  <include file="$(find timed_roslaunch)/launch/timed_roslaunch.launch">
    <arg name="time" value="2" />
    <arg name="pkg" value="dmp" />
    <arg name="file" value="dmp.launch" />
  </include>

  <group if="$(arg use_cam)">
    <group unless="$(arg sim_cam)">
      <include file="$(find roy_dmp)/launch/rs_d435_camera.launch"/>
    </group>
  </group>

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config)" if="$(arg rviz)"/>

</launch>
