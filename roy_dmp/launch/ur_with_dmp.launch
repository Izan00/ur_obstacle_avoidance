<?xml version="1.0"?>
<launch>

  <arg name="sim" default="false"/>

  <!--Camera parameters and configuration-->
  <arg name="use_cam" default="true"/>
  <arg name="sim_cam" default="$(arg sim)"/>
  <arg name="use_cam_tool" default="false"/>
  <arg name="publish_pointcloud" default="true"/>
  <arg name="camera_urdf" default="'$(find roy_dmp)/urdf/d435_camera.urdf.xacro'"/>

  <!--Robot description and related parameter files -->
  <arg name="robot_model" default="ur3" />
  <arg name="robot_urdf" default="'$(find roy_dmp)/urdf/ur.xacro'"/>
  <arg name="joint_limit_params" default="$(find ur_description)/config/$(arg robot_model)/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find ur_description)/config/$(arg robot_model)/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find ur_description)/config/$(arg robot_model)/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find ur_description)/config/$(arg robot_model)/visual_parameters.yaml"/>

  <!--Common parameters -->
  <arg name="transmission_hw_interface" default="hardware_interface/EffortJointInterface" doc="The hardware_interface to expose for each joint in the simulated robot (one of: [PositionJointInterface, VelocityJointInterface, EffortJointInterface])"/>
  <arg name="safety_limits" default="false" doc="If True, enable the safety limits controller"/>
  <arg name="safety_pos_margin" default="0.15" doc="The lower/upper limits in the safety controller" />
  <arg name="safety_k_position" default="20" doc="Used to set k position in the safety controller" />

  <!-- UR -->
  <arg name="debug" default="false" doc="Debug flag that will get passed on to ur_common.launch"/>
  <arg name="robot_ip" default="10.10.73.235" doc="IP address by which the robot can be reached."/>
  <arg name="reverse_ip" default="" doc="IP of the driver, if set to empty it will detect it automatically."/>
  <arg name="reverse_port" default="50001" doc="Port that will be opened by the driver to allow direct communication between the driver and the robot controller."/>
  <arg name="script_sender_port" default="50002" doc="The driver will offer an interface to receive the program's URScript on this port. If the robot cannot connect to this port, `External Control` will stop immediately."/>
  <arg name="trajectory_port" default="50003" doc="Port that will be opened by the driver to allow trajectory forwarding."/>
  <arg name="script_command_port" default="50004" doc="Port that will be opened by the driver to allow forwarding script commands to the robot."/>
  <arg name="tool_voltage" default="0" doc="Tool voltage set at the beginning of the UR program. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_parity" default="0" doc="Parity configuration used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_baud_rate" default="115200" doc="Baud rate used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_stop_bits" default="1" doc="Number of stop bits used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_rx_idle_chars" default="1.5" doc="Number of idle chars in RX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tx_idle_chars" default="3.5" doc="Number of idle chars in TX channel used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_device_name" default="/tmp/ttyUR" doc="Local device name used for tool communication. Only used, when `use_tool_communication` is set to true."/>
  <arg name="tool_tcp_port" default="54321" doc="Port on which the robot controller publishes the tool comm interface. Only used, when `use_tool_communication` is set to true."/>
  <arg name="headless_mode" default="false" doc="Automatically send URScript to robot to execute. On e-Series this does require the robot to be in 'remote-control' mode. With this, the URCap is not needed on the robot."/>
  <arg name="ur_hardware_interface_node_required" default="true" doc="Shut down ros environment if ur_hardware_interface-node dies."/>  
  <arg name="use_tool_communication" value="false"/>
  <arg name="kinematics_config" default="$(find ur_description)/config/$(arg robot_model)/default_kinematics.yaml" doc="Kinematics config file used for calibration correction. This will be used to verify the robot's calibration is matching the robot_description."/>
  
  <!-- Controller configuration -->
  <arg name="sim_controller_config_file" default="$(find ur_gazebo)/config/$(arg robot_model)_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="sim_controllers" default="joint_state_controller eff_joint_traj_controller" doc="Controllers that are activated by default."/>
  <arg name="sim_stopped_controllers" default="joint_group_eff_controller" doc="Controllers that are initally loaded, but not started."/>
  <arg name="controller_config_file" default="$(find ur_robot_driver)/config/$(arg robot_model)_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller scaled_pos_joint_traj_controller speed_scaling_state_controller force_torque_sensor_controller robot_status_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="pos_joint_traj_controller joint_group_vel_controller" doc="Controllers that are initally loaded, but not started."/>
  
  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" default="30" doc="Rate at which robot_state_publisher should publish transforms."/>

  <!-- Gazebo parameters -->
  <arg name="paused" default="false" doc="Starts Gazebo in paused mode" />
  <arg name="gui" default="false" doc="Starts Gazebo gui" />
  <arg name="gazebo_model_name" default="robot"/>
  <arg name="start_gazebo" default="true"/>
  <arg name="gazebo_world" default="$(find roy_dmp)/resources/empty.world"/> <!--worlds/empty.world-->

  <!--Rviz-->
  <arg name="rviz" default="true"/>
  <arg name="rviz_config" value="$(find roy_dmp)/resources/dmp_config.rviz"/>

  <!--Robot model description-->
  <param name="robot_description" command="$(find xacro)/xacro $(arg robot_urdf)
    robot_model:=$(arg robot_model)
    joint_limit_params:=$(arg joint_limit_params)
    kinematics_params:=$(arg kinematics_params)
    physical_params:=$(arg physical_params)
    visual_params:=$(arg visual_params)
    transmission_hw_interface:=$(arg transmission_hw_interface)
    safety_limits:=$(arg safety_limits)
    safety_pos_margin:=$(arg safety_pos_margin)
    safety_k_position:=$(arg safety_k_position)
    sim_cam:=$(arg sim_cam)
    use_cam:=$(arg use_cam)
    use_cam_tool:=$(arg use_cam_tool)
    camera_urdf:=$(arg camera_urdf)
    publish_pointcloud:=$(arg publish_pointcloud)"
  />

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
  </node>

  <!-- Start the 'driver' (ie: Gazebo in this case) -->
  <group if="$(arg sim)">
    <include file="$(find ur_gazebo)/launch/inc/ur_control.launch.xml">
      <arg name="gui" value="$(arg gui)"/>
      <arg name="paused" value="$(arg paused)"/>
      <arg name="controller_config_file" value="$(arg sim_controller_config_file)"/>
      <arg name="controllers" value="$(arg sim_controllers)"/>
      <arg name="stopped_controllers" value="$(arg sim_stopped_controllers)"/>
      <arg name="gazebo_model_name" value="$(arg gazebo_model_name)"/>
      <arg name="start_gazebo" value="$(arg start_gazebo)"/>
      <arg name="gazebo_world" value="$(arg gazebo_world)"/>
      <arg name="spawn_z" default="0"/>
    </include>
  </group>
  <group unless="$(arg sim)">
    <include file="$(find ur_robot_driver)/launch/ur_control.launch">
      <arg name="debug" value="$(arg debug)"/>
      <arg name="use_tool_communication" value="$(arg use_tool_communication)"/>
      <arg name="controller_config_file" value="$(arg controller_config_file)"/>
      <arg name="robot_ip" value="$(arg robot_ip)"/>
      <arg name="reverse_ip" value="$(arg reverse_ip)"/>
      <arg name="reverse_port" value="$(arg reverse_port)"/>
      <arg name="script_sender_port" value="$(arg script_sender_port)"/>
      <arg name="trajectory_port" value="$(arg trajectory_port)"/>
      <arg name="script_command_port" value="$(arg script_command_port)"/>
      <arg name="kinematics_config" value="$(arg kinematics_config)"/>
      <arg name="tf_prefix" value="$(arg tf_prefix)"/>
      <arg name="controllers" value="$(arg controllers)"/>
      <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
      <arg name="headless_mode" value="$(arg headless_mode)"/>
      <arg name="tool_voltage" value="$(arg tool_voltage)"/>
      <arg name="tool_parity" value="$(arg tool_parity)"/>
      <arg name="tool_baud_rate" value="$(arg tool_baud_rate)"/>
      <arg name="tool_stop_bits" value="$(arg tool_stop_bits)"/>
      <arg name="tool_rx_idle_chars" value="$(arg tool_rx_idle_chars)"/>
      <arg name="tool_tx_idle_chars" value="$(arg tool_tx_idle_chars)"/>
      <arg name="tool_device_name" value="$(arg tool_device_name)"/>
      <arg name="tool_tcp_port" value="$(arg tool_tcp_port)"/>
      <arg name="ur_hardware_interface_node_required" value="$(arg ur_hardware_interface_node_required)"/>
    </include>
  </group>

  <!--Start planning executor-->
  <include file="$(eval find(arg('robot_model')+'_moveit_config')+'/launch/moveit_planning_execution.launch')">
    <arg name="sim" value="$(arg sim)" />
  </include> 

  <!--Start DMP drivers-->
  <include file="$(find timed_roslaunch)/launch/timed_roslaunch.launch">
    <arg name="time" value="2" />
    <arg name="pkg" value="dmp" />
    <arg name="file" value="dmp.launch" />
  </include>

  <group ns="cartesian">
  <include file="$(find timed_roslaunch)/launch/timed_roslaunch.launch">
    <arg name="time" value="2" />
    <arg name="pkg" value="dmp" />
    <arg name="file" value="dmp.launch" />
  </include>
  </group>

  <!-- Camera -->
  <group if="$(arg use_cam)">
    <group unless="$(arg sim_cam)">
      <include file="$(find roy_dmp)/launch/rs_d435_camera.launch"/>
    </group>
  </group>

  <!-- Visualization -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(arg rviz_config)" if="$(arg rviz)"/>

</launch>
